name: Frontend CI/CD (Self-Hosted on Pi)

on:
  push:
    branches: [main]
    paths:
      - "**/package.json"
      - "**/src/**"
      - ".github/workflows/frontend.yml"
  pull_request:
    branches: [main]
    paths:
      - "**/package.json"
      - "**/src/**"
      - ".github/workflows/frontend.yml"

env:
  NODE_VERSION: "20"

jobs:
  build_and_deploy:
    name: Build + Deploy
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v4

      - name: Ensure jq
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y jq
          fi

      - id: loc
        name: Locate frontend directory
        run: |
          set -euo pipefail
          CANDIDATES=("frontend" "web" "app" "ui" "client" "apps/frontend" "apps/web" "packages/frontend" "packages/web")
          DIR=""
          for d in "${CANDIDATES[@]}"; do
            if [ -d "$d" ] && [ -f "$d/package.json" ]; then DIR="$d"; break; fi
          done
          [ -n "$DIR" ] || { echo "Could not locate frontend folder"; exit 2; }
          echo "dir=${DIR#./}" >> "$GITHUB_OUTPUT"

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Prepare npm cache
        run: |
          mkdir -p "$HOME/.npm/_cacache"
          echo "NPM_CONFIG_CACHE=$HOME/.npm" >> "$GITHUB_ENV"

      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-${{ hashFiles(format('{0}/package-lock.json', steps.loc.outputs.dir)) }}
          restore-keys: |
            npm-${{ runner.os }}-

      - name: Assert lockfile
        run: |
          test -f "${{ steps.loc.outputs.dir }}/package-lock.json" || { echo "no lockfile"; exit 2; }

      - name: Install
        working-directory: ${{ steps.loc.outputs.dir }}
        env:
          HUSKY: "0"
          CI: "true"
        run: npm ci --no-audit --no-fund

      - id: build
        name: Build
        working-directory: ${{ steps.loc.outputs.dir }}
        env:
          HUSKY: "0"
          CI: "true"
        run: |
          set -euo pipefail
          npm run build || { echo "No build script"; exit 1; }
          OUT="dist"
          [ -d build ] && OUT="build"
          [ -d out ] && OUT="out"
          echo "dir=$OUT" >> "$GITHUB_OUTPUT"

      - name: Deploy locally
        env:
          OUT_DIR: ${{ steps.build.outputs.dir }}
        run: |
          set -euo pipefail
          ROOT="/srv/www/frontend"
          RELEASES="$ROOT/releases"
          CURRENT="$ROOT/current"
          NEW="$RELEASES/${GITHUB_SHA}"
          sudo mkdir -p "$RELEASES" "$NEW"
          sudo rsync -a --delete "${{ steps.loc.outputs.dir }}/$OUT_DIR"/ "$NEW"/
          if [ ! -f "$NEW/index.html" ] && [ "$(find "$NEW" -mindepth 1 -maxdepth 1 -type d | wc -l)" -eq 1 ]; then
            INNER=$(find "$NEW" -mindepth 1 -maxdepth 1 -type d | head -n1)
            sudo rsync -a --delete "$INNER"/ "$NEW"/
            sudo rm -rf "$INNER"
          fi
          sudo ln -sfn "$NEW" "$CURRENT"
          sudo bash -c 'ls -1dt '"$RELEASES"'/* | tail -n +6 | xargs -r rm -rf'
          sudo chown -R deploy:www-data "$ROOT"
          sudo find "$ROOT" -type d -exec chmod 755 {} \;
          sudo find "$ROOT" -type f -exec chmod 644 {} \;
          sudo nginx -t && sudo systemctl reload nginx || true
