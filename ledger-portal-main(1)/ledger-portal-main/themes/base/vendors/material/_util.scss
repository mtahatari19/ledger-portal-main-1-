@use 'sass:map';
@use 'sass:string';
@use '../../functions/contrast' as contrast;

@function modify-material-theme($theme, $foreground, $background) {
  $theme-color: map.get($theme, color);

  // Replace the foreground in the color object's foreground palette.
  $color-foreground-palette: map.get($theme-color, foreground);
  $color-foreground-palette: map.merge($color-foreground-palette, $foreground);
  // Replace the background in the color object's background palette.
  $color-background-palette: map.get($theme-color, background);
  $color-background-palette: map.merge($color-background-palette, $background);

  // Replace the foreground in the foreground palette.
  $foreground-palette: map.get($theme, foreground);
  $foreground-palette: map.merge($foreground-palette, $foreground);
  // Replace the background in the background palette.
  $background-palette: map.get($theme, background);
  $background-palette: map.merge($background-palette, $background);

  // Merge the changes into a new theme.
  $modified-theme-color: map.merge(
      $theme-color,
      (
        foreground: $color-foreground-palette,
        background: $color-background-palette,
      )
  );
  $modified-theme: map.merge(
      $theme,
      (
        color: $modified-theme-color,
      )
  );
  $modified-theme: map.merge(
      $modified-theme,
      (
        foreground: $color-foreground-palette,
        background: $background-palette,
      )
  );

  @return $modified-theme;
}

@function generate-material-palette($palette) {
  $mat-palette: $palette;
  @if $palette {
    $palette-contrast: ();
    @each $shade, $color in $palette {
      $palette-contrast: map.set($palette-contrast, $shade, contrast.contrast-tone($color));
    }
    $mat-palette: map.set($mat-palette, contrast, $palette-contrast);
  }
  @return $mat-palette;
}
